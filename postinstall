#!/bin/bash

set -e 
### utilities function start ###

# ////////////////////////////////////
# // 	 utilities functions	    //
# ////////////////////////////////////

# helper function checks the commands needed for an installer to run
logger () {
	gum log -l "$1" "$(gum format -t emoji $2)"
}

depends_on () {
	logger info "Checking for dependencies üì¶"
	for dep in "$@" 
	do	
		if ! command -v $dep 2>&1 > /dev/null ; then
			logger error "$dep is not found :x: make sure it is installed or add to \$PATH"
			exit 1
		fi
		logger info "$dep found :white_check_mark:"
	done			
	logger info "Checking complete :white_check_mark:"
}

# basically this is equivalent to `depends_on` but for checking if `gum` is installed.
# because `gum` is important to run this post-installation script
check_for_gum () {
	echo "Checking for gum" 
	if ! command -v gum 2>&1 > /dev/null; then
		echo "gum is not installed! Please install before proceeding."
		exit 1
	fi	
}

# param 1: url
# param 2: download destination
# param 3: renamed file
fetch_archive () {
	url="$1"
	dest="$2"	
	rename="$3"	
		
	if gum spin -s globe --title "Fetching archive üì¶" -- wget -O "$dest/$rename" "$url"; then 
		logger info "Successfully fetched archive :white_check_mark:"	
	else 
		logger error ":warning: could not fetch archive"
		exit 1
	fi
}

# param 1: source archive file path
# param 2: extracted path (path to new extraction directory)
handle_tar() {
	archive_file="$1"
	extract_dir="$2"

	mkdir -p "$extract_dir"	
	if gum spin -s points --title "Extracting tar file" -- tar xf "$archive_file" -C "$extract_dir" --strip-components=1 ; then
		logger info "Successfully extract tar file :white_check_mark:"		
		rm "$archive_file"
		logger info "deleted tar file :white_check_mark:"	
	else
		logger error ":warning: could not extract tr file."
		exit 1
	fi 	
}

# param 1: source archive file
# param 2: destination extracted file (dont include the name)
handle_zip() {	
	archive_file="$1"
	extract_dir="$2"
	
	if gum spin -s points --title "Extracting zip file" -- unzip "$archive_file" -d "$extract_dir"  ; then
		logger info "Successfully extract zip file :white_check_mark:"		
		rm "$archive_file"
		logger info "deleted zip file :white_check_mark:"		
	else
		logger error ":warning: could not extract zip file."
		exit 1
	fi 	

}

# param 1: source archive file
# param 2: destination dir
extract_archive () {
	archive_path="$1"
	destination_dir="$2"

	source_file="$(basename "$archive_path")"		
	extension="${source_file#*.}"
	
	case "$source_file" in
		*.tar.gz)		
			handle_tar "$archive_path" "$destination_dir"
		;;
		*.tar.xz)	
			handle_tar "$archive_path" "$destination_dir"
		;;
		*.zip)
			handle_zip "$archive_path" "$destination_dir"
		;;
		*)
			logger error ":warning: file extension $extension is not supported yet!"
			exit 1
		;;
	esac	
}

# param 1: shell
# param 2: strings to add
add_to_path () {
	shell="$1"
	strta="$2"		
	
	case $shell in
		bash)
			echo "$2" >> ~/.bashrc
		;;
		zsh)
			echo "$2" >> ~/.zshrc
		;;
		*)
			logger error "shell $shell not supported yet!"
			exit 1
		;;
	esac		
}

# ////////////////////////////////////
# // 	 utilities functions	    //
# ////////////////////////////////////

# ////////////////////////////////////
# // 	 installer functions	    //
# ////////////////////////////////////

# param 1: OS
# param 2: architecture
# param 3: program version
# param 4: installation prefix
install_go () {
	logger info "Installing go üêøÔ∏è"

	os="$1"		
	architecture="$2"
	version="$3"
	prefix="$4"			
	
	archive_file="go$version.$os-$architecture.tar.gz"	
	archive_url="https://go.dev/dl/$archive_file"
	shell="$(basename $SHELL)"

	if [[ "$architecture" == "x86_64" ]]; then
		archive_file="go$version.$os-amd64.tar.gz"	
		archive_url="https://go.dev/dl/$archive_file"
	fi
	
	fetch_archive "$archive_url" "$prefix" "goarchive.tar.gz"
	
	extract_archive "$prefix/goarchive.tar.gz" "$prefix/godir"		

	add_to_path "$shell" "export GOPATH=\"$prefix/godir/bin\""
	add_to_path "$shell" "export PATH=\"\$PATH:$GOPATH\""	
}

install_rust() {
	logger info "Installing Rust..."	
	curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh	
}

install_zig() {
	logger info "Installing Zig..."	

	os="$1"		
	architecture="$2"
	version="$3"
	prefix="$4"	
	archive_file="zig-$os-$architecture-$version.tar.xz"
	url="https://ziglang.org/download/$version/$archive_file"
	shell="$(basename $SHELL)"
	
	fetch_archive "$url" "$prefix" "zigarchive.tar.xz"	
	
	extract_archive "$prefix/zigarchive.tar.xz" "$prefix/zigdir"

	# move zig binary into bin directory	
	mkdir -p "$prefix/zigdir/bin"	
	mv "$prefix/zigdir/zig" "$prefix/zigdir/bin"
	
	add_to_path "$shell" "export PATH=\"\$PATH:$prefix/zigdir/bin\""		
}

install_deno() {
	logger info "Installing Deno..."	

	architecture="$1"
	version="$2"
	prefix="$3"
	target=""
	shell="$(basename $SHELL)"	
	
	case "$arch" in
	"Darwin x86_64") target="x86_64-apple-darwin" ;;
	"Darwin arm64") target="aarch64-apple-darwin" ;;
	"Linux aarch64") target="aarch64-unknown-linux-gnu" ;;
	*) target="x86_64-unknown-linux-gnu" ;;
	esac	
	
	archive_url="https://dl.deno.land/release/v$version/deno-$target.zip"
	
	fetch_archive "$archive_url" "$prefix" "denoarchive.zip"	

	extract_archive "$prefix/denoarchive.zip" "$prefix/denodir"
	
	mkdir -p "$prefix/denodir/bin"	
	mv "$prefix/denodir/deno" "$prefix/denodir/bin"

	add_to_path "$shell" "export PATH=\"\$PATH:$prefix/denodir/bin\""		
}

install_omp() {
	logger info "Installing Oh-my-posh..."	
	os="$1"
	architecture="$2"
	ompversion="$3"
	prefix="$4"
	url="https://github.com/JanDeDobbeleer/oh-my-posh/releases/download/v$ompversion/posh-$os-$architecture"
	shell="$(basename $SHELL)"
	
	if [[ "$architecture" == "x86_64" ]]; then		
		architecture="amd64"
		url="https://github.com/JanDeDobbeleer/oh-my-posh/releases/download/v$ompversion/posh-$os-$architecture"
	fi
	
	fetch_archive "$url" "$prefix" "oh-my-posh"	

	chmod +x "$prefix/oh-my-posh"	
	
	mkdir -p "$prefix/omp/bin"
	mv "$prefix/oh-my-posh" "$prefix/omp/bin"		
	
	add_to_path "$shell" "export PATH=\"\$PATH:$prefix/omp/bin\""
}

# ////////////////////////////////////
# // 	 installer functions	    //
# ////////////////////////////////////


# ////////////////////////////////////
# // 	 	entrypoint	    //
# ////////////////////////////////////

main () {	
	# this script is very dependant using `gum`
	check_for_gum 	
	depends_on "wget" "curl" "tar" "xz" "unzip"

	a="Go"
	b="Rust"
	c="Zig"
	d="Deno"
	e="Oh-my-posh"
	options="$(gum choose --limit 5 --header "Choose one or more programs to be installed!" $a $b $c $d $e)"
	
	for option in $options 
	do
		case $option in
			$a)
				os="$(uname | tr '[:upper:]' '[:lower:]')"	
				arch="$(uname -i)"
				version="$(gum input --placeholder "which version of $a are you going to install?" --value="1.23.2" )"	
				prefix="$(gum input --placeholder "where do you want $a to be installed?" --value="$HOME/.local/bin" )"	
				if [[ -z $version || -z $prefix  ]]; then 
					logger error ":warning: Please fill out the version and prefix"
					exit 1
				fi
				
				install_go "$os" "$arch" "$version" "$prefix"
			;;
			$b)
				install_rust
			;;
			$c)
				os="$(uname | tr '[:upper:]' '[:lower:]')"	
				arch="$(uname -i)"
				version="$(gum input --placeholder "which version of $c are you going to install?" --value="0.13.0" )"	
				prefix="$(gum input --placeholder "where do you want $c to be installed?" --value="$HOME/.local/bin" )"	
				if [[ -z $version || -z $prefix  ]]; then 
					logger error ":warning: Please fill out the version and prefix"
					exit 1
				fi
				
				install_zig "$os" "$arch" "$version" "$prefix"
			;;
			$d)
				arch="$(uname -i)"
				version="$(gum input --placeholder "which version of $d are you going to install?" --value="2.0.4" )"	
				prefix="$(gum input --placeholder "where do you want $d to be installed?" --value="$HOME/.local/bin" )"	
				if [[ -z $version || -z $prefix  ]]; then 
					logger error ":warning: Please fill out the version and prefix"
					exit 1
				fi
				install_deno "$arch" "$version" "$prefix"
			;;
			$e)
				os="$(uname | tr '[:upper:]' '[:lower:]')"	
				arch="$(uname -i)"
				version="$(gum input --placeholder "which version of $c are you going to install?" --value="23.20.3" )"	
				prefix="$(gum input --placeholder "where do you want $c to be installed?" --value="$HOME/.local/bin" )"	
				if [[ -z $version || -z $prefix  ]]; then 
					logger error ":warning: Please fill out the version and prefix"
					exit 1
				fi
				install_omp "$os" "$arch" "$version" "$prefix"
			;;
			*)
				logger error "Unreachable :x:"
				exit 1
			;;
		esac	
	done	
}

main
